name: docker-init

inputs:
  deploy-user:
    required: true
  deploy-token:
    required: true
  image-name:
    required: true

runs:
  using: composite
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: image=moby/buildkit:v0.13.0

    - name: Login to ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ inputs.deploy-user }}
        password: ${{ inputs.deploy-token }}

    - name: Set SOURCE_DATE_EPOCH
      run: |
        echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV
      shell: bash

    - name: Determine Debian tag
      run: |
        DEBIAN_RELEASE=$(grep -m 1 'ARG DEBIAN_TAG=' Dockerfile | sed 's/.*DEBIAN_TAG=\(.*\)-.*/\1/')
        echo "DEBIAN_TAG=$(podman image search --list-tags debian --limit 1000000000 | \
                           grep "$DEBIAN_RELEASE-.*-slim" | sort -r | head -1 | sed 's/.*[ ]\+//')" >> $GITHUB_ENV
      shell: bash

    - name: Prepare repository for COPY-in
      run: |
        git clone . /home/runner/kas-clone
      shell: bash

    - name: Define image description
      run: |
        case ${{ inputs.image-name }} in
        kas)
            echo "IMAGE_DESCRIPTION=kas build environment for Yocto/OpenEmbedded projects" >> $GITHUB_ENV
            ;;
        kas-isar)
            echo "IMAGE_DESCRIPTION=kas build environment for isar-based Debian projects" >> $GITHUB_ENV
            ;;
        esac
      shell: bash

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        annotations: |
          org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}
          org.opencontainers.image.licenses=MIT and others
      env:
        DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

    - name: Cache var-cache-apt
      id: cache-var-cache-apt
      uses: actions/cache@v4
      with:
        path: var-cache-apt
        key: var-cache-apt-${{ env.DEBIAN_TAG }}-${{ inputs.image-name }}

    - name: Cache var-lib-apt
      id: cache-var-lib-apt
      uses: actions/cache@v4
      with:
        path: var-lib-apt
        key: var-lib-apt-${{ env.DEBIAN_TAG }}-${{ inputs.image-name }}

    - name: Inject var-cache-apt into docker
      uses: reproducible-containers/buildkit-cache-dance@v2.1.4
      with:
        cache-source: var-cache-apt
        cache-target: /var/cache/apt
        skip-extraction: ${{ steps.cache-var-cache-apt.outputs.cache-hit }}

    - name: Inject var-lib-apt into docker
      uses: reproducible-containers/buildkit-cache-dance@v2.1.4
      with:
        cache-source: var-lib-apt
        cache-target: /var/lib/apt
        skip-extraction: ${{ steps.cache-var-lib-apt.outputs.cache-hit }}
